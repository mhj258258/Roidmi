C51 COMPILER V9.52.0.0   CALCULATE                                                         10/24/2019 11:20:59 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE CALCULATE
OBJECT MODULE PLACED IN .\output\Calculate.obj
COMPILER INVOKED BY: C:\Program Files (x86)\keil 51\C51\BIN\C51.EXE code\Calculate.c LARGE OPTIMIZE(7,SPEED) BROWSE INCD
                    -IR(.\header;.\roidmi\inc) DEBUG OBJECTEXTEND PRINT(.\output\Calculate.lst) TABS(2) OBJECT(.\output\Calculate.obj)

line level    source

   1          /********************************************************************************
   2          Copyright (C), Sinowealth Electronic. Ltd.
   3          Author:   andyliu
   4          Version:  V0.0
   5          Date:     2014/05/30
   6          History:
   7            V0.0    2014/05/30     Preliminary
   8          ********************************************************************************/
   9          #include "system.h"
  10          #include "Calibrate.h"
  11          #include "AfeMtp.h"
  12          
  13          
  14          /*******************************************************************************
  15          Function: U16 CalcuTemp(U16 getdata)
  16          Description:  Based on collected voltage ratio to calculate the corresponding temperature(-50~110)
  17          Input:    
  18          Output: 
  19          Others:
  20          *******************************************************************************/
  21          #define REF_RES_VAL 1000        ////resistance 10K=1000*10,  The unit is 10 ohms
  22          U16 code NTC103AT[161]=      //this table  the temp corresponding to the (resistance value/10) of 103AT
  23          {
  24            32950, 30970,29124,27404,25799,24770,23335,21995,20743,19572,18850, 17796, 16810, 15885, 15019,
  25            14410, 13633, 12904, 12219, 11576, 11130, 10550, 10005, 9492, 9009,8643, 8208, 7798, 7412, 7048, 6777, 64
             -47, 6136,
  26            5842, 5564, 5341, 5090, 4852, 4627, 4414, 4247, 4053, 3870, 3696, 3532,3390, 3241, 3099, 2964, 2836, 2728
             -, 2611,
  27            2501, 2395, 2295, 2205, 2114, 2027, 1944, 1866, 1796, 1724, 1655, 1590, 1527,1469, 1412, 1357, 1305, 1256
             -, 1209,
  28            1163, 1120, 1078, 1038, 1000, 963, 928, 894, 862, 831, 801, 772, 745, 719, 694, 670, 646, 624, 603,583, 5
             -62, 543,
  29            525, 508, 491, 474, 459, 444, 430, 416, 402, 389, 377, 365, 354, 342, 331, 321, 311, 302, 292, 283, 275, 
             -267,259,
  30            251, 243, 236, 229, 223, 216, 210, 204, 198, 192, 186, 181, 176, 171, 167, 162, 157, 153, 149, 145, 141, 
             -137, 133,
  31            130, 127, 123, 120, 117, 114, 111, 108, 105, 102, 100, 97, 95, 92, 90, 88, 86, 83, 81, 79, 78, 76
  32          };
  33          U16 CalcuTemp(U16 getdata)
  34          {
  35   1        U8  i;
  36   1        U16 Temperature;
  37   1          U32 tempcalcu;
  38   1       //等效电阻值
  39   1        tempcalcu= (U32)getdata*REF_RES_VAL/(4096-getdata);     //calculte the resistance value of 103AT
  40   1          if(tempcalcu > 10)
  41   1          {
  42   2              tempcalcu -= 10;
  43   2          }   
  44   1       
  45   1        if(tempcalcu >= NTC103AT[0])                     //look up table to find the resieter  correspond temp
  46   1        {
  47   2          Temperature = 2731-500;     
  48   2        }
C51 COMPILER V9.52.0.0   CALCULATE                                                         10/24/2019 11:20:59 PAGE 2   

  49   1        else if(tempcalcu <= NTC103AT[160])
  50   1        {
  51   2          Temperature = 2731+1100;
  52   2        }
  53   1        else
  54   1        {
  55   2          i = ucTempeMiddle;
  56   2          if(tempcalcu > NTC103AT[i])
  57   2          {
  58   3            for(i=ucTempeMiddle-1; i>=0; i--)
  59   3            {
  60   4              if(tempcalcu <= NTC103AT[i])        //NTC103AT[i+1]<resis<NTC103AT[i]
  61   4              {
  62   5                break;
  63   5              }
  64   4            }
  65   3          }
  66   2          else
  67   2          {
  68   3            for(i=ucTempeMiddle+1; i<160; i++)
  69   3            {
  70   4              if(tempcalcu > NTC103AT[i])           //NTC103AT[i-1]<resis<NTC103AT[i]
  71   4              {
  72   5                break;
  73   5              }
  74   4            }
  75   3            i--;
  76   3          }
  77   2          ucTempeMiddle = i;
  78   2          
  79   2          Temperature = (U16)(ucTempeMiddle-50)*10+(NTC103AT[i]-tempcalcu)*10/(NTC103AT[i]-NTC103AT[i+1])+2731; 
  80   2        }
  81   1        return Temperature; 
  82   1      }
  83          
  84          
  85          /*******************************************************************************
  86          Function: 
  87          Description:  
  88          Input:    
  89          Output: 
  90          Others:
  91          *******************************************************************************/
  92          void CalcuTemperature(void)
  93          {
  94   1          U16 TempeData;
  95   1         //校准参数等后期测试的时候放入该数值E2siTS1Offset = 0x000
  96   1          TempeData = CalcuTemp(AFE.uiTS1) + E2siTS1Offset;  //获取的是外部的温度
  97   1          UART_IRQ_DISABLE;
  98   1          Info.uiTemp1 = TempeData; //Info.uiTemp1 存放的是外部的温度值
  99   1          UART_IRQ_ENABLE;
 100   1      
 101   1         //这边前面没有ICtemp1数值的获取等到后面做硬件了实际调
 102   1          TempeData = (U32)AFE.uiICTemp1*1623/1000+71;        //caculate ICTemp1    0.1623*TEMP-266
 103   1          UART_IRQ_DISABLE;
 104   1          Info.uiICTemp1 = TempeData;
 105   1          UART_IRQ_ENABLE;
 106   1        
 107   1          if(ucCellNum>5)                       //Cellmun>5 ic must be AFE
 108   1          {    
 109   2              TempeData = (U32)AFE.uiICTemp2*1623/1000+71;        //caculate ICTemp2    0.1623*TEMP-266     0.17*temp1
             - -270
C51 COMPILER V9.52.0.0   CALCULATE                                                         10/24/2019 11:20:59 PAGE 3   

 110   2              UART_IRQ_DISABLE;
 111   2              Info.uiICTemp2 = TempeData;
 112   2              UART_IRQ_ENABLE;
 113   2          }
 114   1       
 115   1          uiTempeMin = Info.uiTemp1;
 116   1          uiTempeMax = Info.uiTemp1;
 117   1          if(bTempNum)                         //two tempe detect
 118   1          {
 119   2              TempeData = CalcuTemp(AFE.uiTS2) + E2siTS2Offset;
 120   2              UART_IRQ_DISABLE;
 121   2              Info.uiTemp2 = TempeData;
 122   2              UART_IRQ_ENABLE;
 123   2      
 124   2              if(TempeData < uiTempeMin)
 125   2              {
 126   3                  uiTempeMin = TempeData;
 127   3              }
 128   2              else
 129   2              {
 130   3                  uiTempeMax = TempeData;
 131   3              }
 132   2      
 133   2          }
 134   1      #if tempdebug
                  printf("\n 换算值：外部uiTempeMax=%d,uiTempeMin=%d \n",uiTempeMax,uiTempeMin);    
              #endif      
 137   1        
 138   1          
 139   1      #if tempdebug
                  printf("\n 温度换算值：外部Info.uiTemp1=%d,Info.uiTemp2=%d_____IC内部Info.uiICTemp1=%d Info.uiICTemp2=%d
             -\n",(Info.uiTemp1-2731),(Info.uiTemp2-2731),(Info.uiICTemp1-2731),(Info.uiICTemp2-2731));    
              #endif  
 142   1          
 143   1      }
 144          
 145          
 146          /*******************************************************************************
 147          Function: 
 148          Description:  
 149          1. Calculate a single battery voltage
 150          2. Calculate the total voltage
 151          Input:    
 152          Output: 
 153          Others:
 154          *******************************************************************************/
 155          void CalcuVoltage(void)
 156          {
 157   1        U8 i;
 158   1        U32 TempPackVol=0, TempCellVol=0;
 159   1        uiCellVmax = 0;           
 160   1        uiCellVmin = 6000;
 161   1      #if debug
                  TI = 0;
                  TI = 1; 
                  printf("ucCellNum = %bd\n",ucCellNum);    
              #endif 
 166   1        for(i=ucCellNumOffset; i<(ucCellNum+ucCellNumOffset); i++)
 167   1        {
 168   2          //E2uiVPackGain =0x00A,0x022, = 2594校准用的 3800/2594
 169   2          TempCellVol = (U32)AFE.uiCell[i]*CALIVOL/E2uiVPackGain;   //Calculate a single battery voltage
 170   2        
C51 COMPILER V9.52.0.0   CALCULATE                                                         10/24/2019 11:20:59 PAGE 4   

 171   2          if(TempCellVol > uiCellVmax)                    //calculate the max and min vlotage
 172   2          {
 173   3            uiCellVmax = TempCellVol; 
 174   3          }
 175   2          if(TempCellVol < uiCellVmin)
 176   2          {
 177   3            uiCellVmin = TempCellVol; 
 178   3          }
 179   2      
 180   2              if(!bBalancingFlg)                    //if bCellOpenDecFlag this data will throw away
 181   2              {
 182   3                UART_IRQ_DISABLE;
 183   3                Info.uiVCell[i] = TempCellVol;
 184   3                UART_IRQ_ENABLE;
 185   3                TempPackVol += TempCellVol; //这边就把每节电芯加起来了          
 186   3              }
 187   2        }
 188   1        //没有平衡 ，总的电量，如果是在平衡功能下就取消总电量值
 189   1        if(!bBalancingFlg)
 190   1          {
 191   2      #if debug
                  printf("\nbBalancingFlg is 0\n");    
              #endif 
 194   2            UART_IRQ_DISABLE;
 195   2            Info.ulVoltage = TempPackVol;                 //Calculate the total voltage
 196   2            UART_IRQ_ENABLE;
 197   2          }
 198   1      
 199   1      #if debug
                  printf("\n 电芯总电压：Info.ulVoltage = %d \n",Info.ulVoltage);    
              #endif  
 202   1      #if debug
                  printf("\n 电芯电压值：TempCellVol = %ld,uiCellVmin = %d uiCellVmax = %d \n",TempCellVol,uiCellVmin,uiC
             -ellVmax);    
                              
              #endif  
 206   1      
 207   1        
 208   1      
 209   1      
 210   1      }
 211          
 212          
 213          /*******************************************************************************
 214          Function: GetAFEData(void)
 215          Description:  
 216          Input:    
 217          Output: 
 218          Others:
 219          *******************************************************************************/
 220          bit GetAFEData(void)
 221          {
 222   1        U8  i;
 223   1        BOOL result=1;
 224   1      //8节电池的话，这边offset=2   ucCellNum+ucCellNumOffset = 8+2=10
 225   1        for(i=ucCellNumOffset; i<(ucCellNum+ucCellNumOffset); i++) //读取8组电池的数据
 226   1          {
 227   2            //0x0E+2*2就是从AFE_CELL3H开始
 228   2          if(!TWIReadAFE(AFE_CELL1H+2*i, (U8 xdata *)(&AFE.uiCell[i]))) //通过TWI读取VADC采集的电压值()
 229   2              {
 230   3                result = 0;
 231   3                return result;
C51 COMPILER V9.52.0.0   CALCULATE                                                         10/24/2019 11:20:59 PAGE 5   

 232   3              }
 233   2        }
 234   1        if(!TWIReadAFE(AFE_TS1H, (U8 xdata *)&AFE.uiTS1))
 235   1        {
 236   2          result = 0;
 237   2          return result;
 238   2        }
 239   1        if(!TWIReadAFE(AFE_TS2H, (U8 xdata *)&AFE.uiTS2))
 240   1        {
 241   2          result = 0;
 242   2          return result;
 243   2         }
 244   1      //by tomi 添加IC温度检测
 245   1      //-----------------------------------------
 246   1        if(!TWIReadAFE(AFE_TEMP1H, (U8 xdata *)&AFE.uiICTemp1))
 247   1        {
 248   2          result = 0;
 249   2          return result;
 250   2        }
 251   1        if(!TWIReadAFE(AFE_TEMP2H, (U8 xdata *)&AFE.uiICTemp2))
 252   1        {
 253   2          result = 0;
 254   2          return result;
 255   2        }
 256   1      //-----------------------------------------   
 257   1        return result;
 258   1      }
 259          
 260          
 261          /*******************************************************************************
 262          Function: BatteryInfoManage(void)
 263          Description: First Calculate Temp1/Temp2/VCell1-VCell10/Current 
 264          Input:
 265          Output:
 266          Others:
 267          *******************************************************************************/
 268          void BatteryInfoManage(void)
 269          {
 270   1        if(GetAFEData())//获取电芯电压和温度（外部）
 271   1        {
 272   2          CalcuTemperature();
 273   2          
 274   2          CalcuVoltage();   
 275   2      
 276   2        }
 277   1      }
 278          
 279          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1296    ----
   CONSTANT SIZE    =    322    ----
   XDATA SIZE       =   ----      17
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
