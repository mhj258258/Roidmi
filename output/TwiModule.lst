C51 COMPILER V9.52.0.0   TWIMODULE                                                         10/24/2019 11:21:05 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE TWIMODULE
OBJECT MODULE PLACED IN .\output\TwiModule.obj
COMPILER INVOKED BY: C:\Program Files (x86)\keil 51\C51\BIN\C51.EXE code\TwiModule.c LARGE OPTIMIZE(7,SPEED) BROWSE INCD
                    -IR(.\header;.\roidmi\inc) DEBUG OBJECTEXTEND PRINT(.\output\TwiModule.lst) TABS(2) OBJECT(.\output\TwiModule.obj)

line level    source

   1          /********************************************************************************
   2          Copyright (C), Sinowealth Electronic. Ltd.
   3          Author:   andyliu
   4          Version:  V0.0
   5          Date:     2019/03/13
   6          History:
   7            V0.0    2019/03/13     Preliminary
   8          ********************************************************************************/
   9          
  10          #include "System.h"
  11          #include "ExtE2PRomRTC.h"
  12          
  13          
  14          #ifdef TWI_MODULE_OPERATE
  15          
  16          U8 code CRC8Table[]=
  17          {             //120424-1      CRC Table
  18            0x00,0x07,0x0E,0x09,0x1C,0x1B,0x12,0x15,0x38,0x3F,0x36,0x31,0x24,0x23,0x2A,0x2D,
  19            0x70,0x77,0x7E,0x79,0x6C,0x6B,0x62,0x65,0x48,0x4F,0x46,0x41,0x54,0x53,0x5A,0x5D,
  20            0xE0,0xE7,0xEE,0xE9,0xFC,0xFB,0xF2,0xF5,0xD8,0xDF,0xD6,0xD1,0xC4,0xC3,0xCA,0xCD,
  21            0x90,0x97,0x9E,0x99,0x8C,0x8B,0x82,0x85,0xA8,0xAF,0xA6,0xA1,0xB4,0xB3,0xBA,0xBD,
  22            0xC7,0xC0,0xC9,0xCE,0xDB,0xDC,0xD5,0xD2,0xFF,0xF8,0xF1,0xF6,0xE3,0xE4,0xED,0xEA,
  23            0xB7,0xB0,0xB9,0xBE,0xAB,0xAC,0xA5,0xA2,0x8F,0x88,0x81,0x86,0x93,0x94,0x9D,0x9A,
  24            0x27,0x20,0x29,0x2E,0x3B,0x3C,0x35,0x32,0x1F,0x18,0x11,0x16,0x03,0x04,0x0D,0x0A,
  25            0x57,0x50,0x59,0x5E,0x4B,0x4C,0x45,0x42,0x6F,0x68,0x61,0x66,0x73,0x74,0x7D,0x7A,
  26            0x89,0x8E,0x87,0x80,0x95,0x92,0x9B,0x9C,0xB1,0xB6,0xBF,0xB8,0xAD,0xAA,0xA3,0xA4,
  27            0xF9,0xFE,0xF7,0xF0,0xE5,0xE2,0xEB,0xEC,0xC1,0xC6,0xCF,0xC8,0xDD,0xDA,0xD3,0xD4,
  28            0x69,0x6E,0x67,0x60,0x75,0x72,0x7B,0x7C,0x51,0x56,0x5F,0x58,0x4D,0x4A,0x43,0x44,
  29            0x19,0x1E,0x17,0x10,0x05,0x02,0x0B,0x0C,0x21,0x26,0x2F,0x28,0x3D,0x3A,0x33,0x34,
  30            0x4E,0x49,0x40,0x47,0x52,0x55,0x5C,0x5B,0x76,0x71,0x78,0x7F,0x6A,0x6D,0x64,0x63,
  31            0x3E,0x39,0x30,0x37,0x22,0x25,0x2C,0x2B,0x06,0x01,0x08,0x0F,0x1A,0x1D,0x14,0x13,
  32            0xAE,0xA9,0xA0,0xA7,0xB2,0xB5,0xBC,0xBB,0x96,0x91,0x98,0x9F,0x8A,0x8D,0x84,0x83,
  33            0xDE,0xD9,0xD0,0xD7,0xC2,0xC5,0xCC,0xCB,0xE6,0xE1,0xE8,0xEF,0xFA,0xFD,0xF4,0xF3
  34          };
  35          
  36          
  37          
  38          /*******************************************************************************
  39          Function:
  40          TWICheckStatus()
  41          Input: 
  42          Output:
  43          ********************************************************************************/
  44          bit TWICheckStatus(U8 Status)
  45          {
  46   1        BOOL result = 1;
  47   1          U16 timeoutcount = 48000;
  48   1      
  49   1        while((TWICON&0x08)==0)             //等待TWI通讯结束 ，(TWICON&0x08)串行中断标志位
  50   1          {
  51   2            RSTSTAT = 0x00;
  52   2              if(timeoutcount)
  53   2              {
  54   3                  timeoutcount--;
C51 COMPILER V9.52.0.0   TWIMODULE                                                         10/24/2019 11:21:05 PAGE 2   

  55   3              }
  56   2              else
  57   2              {
  58   3                  break;
  59   3              }
  60   2          }
  61   1        if((TWISTA&0xf8) != Status) 
  62   1        {
  63   2          result = 0;                     //Error
  64   2        }
  65   1        
  66   1        return result;
  67   1      }
  68          
  69          
  70          /*******************************************************************************
  71          Function: CRC8cal()
  72          Description:
  73          Input: 
  74          Output: 
  75          ********************************************************************************/
  76          U8 CRC8cal(U8 *p, U8 counter)          //look-up table calculte CRC 
  77          {    
  78   1          U8 crc8 = 0;    
  79   1          
  80   1        for( ; counter > 0; counter--)
  81   1        {
  82   2          RSTSTAT = 0x00;   
  83   2          crc8 = CRC8Table[crc8^*p];    
  84   2            p++;    
  85   2          }    
  86   1          return(crc8);    
  87   1      }   
  88          
  89          
  90          /*******************************************************************************
  91          Function: TwiWrite()
  92          Description:  write one byte
  93          Input: SlaveID--Slave Address
  94                    RegAddr--register addr
  95                    RegData--register data 
  96          Output: CY:1--OK
  97                            0--Error
  98          ********************************************************************************/
  99          bit TwiWrite(U8 SlaveID, U16 WrAddr, U8 Length, U8 xdata *WrBuf)
 100          {
 101   1        U8 i;
 102   1        U8 TempBuf[4];
 103   1        BOOL result = 1;
 104   1        
 105   1          TempBuf[0] = SlaveID; //从机地址
 106   1          TempBuf[1] = (U8)WrAddr;//要写入的地址
 107   1          TempBuf[2] = *WrBuf;//reg的值
 108   1          TempBuf[3] = CRC8cal(TempBuf, 3);
 109   1        
 110   1        
 111   1        if(Length > 0)
 112   1        {
 113   2          HTimeoutChk();//使能超时计数
 114   2          TWICON = 0x60;          //Start 0110 0000 开启TWI功能，当总线空闲时间发送起始条件
 115   2          
 116   2          if((!TWICheckStatus(0x08))&&(!TWICheckStatus(0x10))) //0x08已发送起始条件 0x10已发送重复开始条件
C51 COMPILER V9.52.0.0   TWIMODULE                                                         10/24/2019 11:21:05 PAGE 3   

 117   2          {
 118   3            result = 0;
 119   3            goto WrErr;
 120   3          }
 121   2          
 122   2          TWIDAT = SlaveID;       //Slave地址
 123   2          TWICON = 0x40;
 124   2          if(!TWICheckStatus(0x18))//已经发送SLA+W 已经接收ACK
 125   2          {
 126   3            result = 0;
 127   3            goto WrErr;
 128   3          }
 129   2          
 130   2          if(SlaveID == E2PROM_ID)
 131   2          {
 132   3            TWIDAT = (U8)(WrAddr>>8); //写寄存器高字节地址-仅针对外挂EEPROM
 133   3            TWICON = 0x40;
 134   3            if(!TWICheckStatus(0x28))
 135   3            {
 136   4              result = 0;
 137   4              goto WrErr;
 138   4            }
 139   3          }
 140   2      
 141   2          TWIDAT = (U8)WrAddr;      //写寄存器地址
 142   2          TWICON = 0x40;
 143   2          if(!TWICheckStatus(0x28)) //已发送TWIDAT中的数据，已经接收到ACK
 144   2          {
 145   3            result = 0;
 146   3            goto WrErr;
 147   3          }
 148   2          
 149   2          if(SlaveID == AFE_CHIP_ID)    //如果是写AFE寄存器，则固定写一个字节+CRC
 150   2          {
 151   3            TWIDAT = *WrBuf;      //Write Data
 152   3            TWICON = 0x40;
 153   3            if(!TWICheckStatus(0x28))
 154   3            {
 155   4              result = 0;
 156   4              goto WrErr;
 157   4            }
 158   3            
 159   3            TWIDAT = TempBuf[3];      //Write CRC
 160   3            TWICON = 0x40;
 161   3            if(!TWICheckStatus(0x28))//已发送TWIDAT中的数据，已经接收到ACK
 162   3            {
 163   4              result = 0;
 164   4              goto WrErr;
 165   4            }
 166   3          }
 167   2          else              //写EEPROM和RTC
 168   2          {
 169   3            for(i=0; i<Length; i++)
 170   3            {
 171   4              RSTSTAT = 0x00;
 172   4              TWIDAT = *WrBuf;
 173   4              TWICON = 0x40;
 174   4              if(!TWICheckStatus(0x28))
 175   4              {
 176   5                result = 0;
 177   5                goto WrErr;
 178   5              }
C51 COMPILER V9.52.0.0   TWIMODULE                                                         10/24/2019 11:21:05 PAGE 4   

 179   4              WrBuf++;
 180   4            }
 181   3          }
 182   2      WrErr:
 183   2          TWICON = 0x50;
 184   2        }
 185   1        
 186   1      
 187   1        return result;
 188   1      }
 189          
 190          
 191          /*******************************************************************************
 192          Function: TwiRead()
 193          Description:read rtc register
 194          Input:   RdAddr--register addr
 195                      Lenth   --read data length
 196                      RdBuf   --data buffer
 197          Output: 
 198          Others:
 199          ********************************************************************************/
 200          bit TwiRead(U8 SlaveID, U16 RdAddr, U8 Length, U8 xdata *RdBuf)
 201          {
 202   1        BOOL result=1;
 203   1        U8 i;
 204   1          U8 xdata TempBuf[46];
 205   1          U8 RdCrc=0;
 206   1          U16 timeoutcount = 48000;
 207   1      
 208   1          TempBuf[0] = SlaveID;
 209   1          TempBuf[1] = (U8)RdAddr;
 210   1      //    TempBuf[2] = Length;
 211   1          TempBuf[2] = SlaveID | 0x01;
 212   1        
 213   1        if(Length > 0)
 214   1        {
 215   2          HTimeoutChk();
 216   2          TWICON = 0x60;        //Start
 217   2          if((!TWICheckStatus(0x08))&&(!TWICheckStatus(0x10)))
 218   2          {
 219   3            result = 0;
 220   3            goto RdErr;
 221   3          }
 222   2          
 223   2          TWIDAT = SlaveID;     //Slave地址
 224   2          TWICON = 0x40;
 225   2          if(!TWICheckStatus(0x18))
 226   2          {
 227   3            result = 0;
 228   3            goto RdErr;
 229   3          }
 230   2      
 231   2          if(SlaveID == E2PROM_ID)
 232   2          {
 233   3            TWIDAT = (U8)(RdAddr>>8);//读寄存器高字节地址-仅针对外挂EEPROM
 234   3            TWICON = 0x40;
 235   3            if(!TWICheckStatus(0x28))
 236   3            {
 237   4              result = 0;
 238   4              goto RdErr;
 239   4            }
 240   3          }
C51 COMPILER V9.52.0.0   TWIMODULE                                                         10/24/2019 11:21:05 PAGE 5   

 241   2          
 242   2          TWIDAT = (U8)RdAddr;    //发送寄存器地址
 243   2          TWICON = 0x40;
 244   2          if(!TWICheckStatus(0x28))
 245   2          {
 246   3            result = 0;
 247   3            goto RdErr;
 248   3          }
 249   2          
 250   2      //    if(SlaveID == AFE_CHIP_ID)
 251   2      //    {
 252   2      //      TWIDAT = Length;    //发送读取数据长度，只AFE IC需要发送长度
 253   2      //      TWICON = 0x40;
 254   2      //      if(!TWICheckStatus(0x28))
 255   2      //      {
 256   2      //        result = 0;
 257   2      //        goto RdErr;
 258   2      //      }
 259   2      //    }
 260   2          
 261   2          TWICON = 0x60;        //RStart
 262   2          if((!TWICheckStatus(0x08))&&(!TWICheckStatus(0x10)))
 263   2          {
 264   3            result = 0;
 265   3            goto RdErr;
 266   3          }
 267   2      
 268   2          TWIDAT = SlaveID|0x01;    //Slave Address and Read
 269   2          TWICON = 0x40;
 270   2          if(!TWICheckStatus(0x40))
 271   2          {
 272   3            result = 0;
 273   3            goto RdErr;
 274   3          }
 275   2      
 276   2          for(i=0; i<Length; i++)
 277   2          {
 278   3            RSTSTAT = 0x00;
 279   3            if((SlaveID!=AFE_CHIP_ID))    //Read E2PROM RTC
 280   3            {
 281   4              if(i == Length-1)
 282   4              {
 283   5                TWICON = 0x40;          //No ACK
 284   5                TWICheckStatus(0x58);
 285   5              }
 286   4              else
 287   4              {
 288   5                TWICON = 0x44;          //ACK
 289   5                TWICheckStatus(0x50);
 290   5              }
 291   4              *RdBuf = TWIDAT;
 292   4              RdBuf++;
 293   4            }
 294   3            else
 295   3            {
 296   4              TWICON = 0x44;          //ACK
 297   4              TWICheckStatus(0x50);//数据已经接受并受到回应
 298   4              TempBuf[3+i] = TWIDAT;
 299   4            }
 300   3          }
 301   2          
 302   2          if(SlaveID == AFE_CHIP_ID)
C51 COMPILER V9.52.0.0   TWIMODULE                                                         10/24/2019 11:21:05 PAGE 6   

 303   2          {
 304   3            TWICON = 0x40;            //No ACK
 305   3            TWICheckStatus(0x58);
 306   3            RdCrc = TWIDAT;
 307   3            if(RdCrc ==  CRC8cal(TempBuf, 3+Length))
 308   3            {
 309   4              for(i=0; i<Length; i++)
 310   4              {
 311   5                *RdBuf = TempBuf[3+i];
 312   5                RdBuf++;
 313   5              }
 314   4            }
 315   3            else
 316   3            {
 317   4              result = 0;
 318   4              goto RdErr;
 319   4            }
 320   3          }
 321   2      RdErr:
 322   2          TWICON = 0x50;                  //TWI Stop
 323   2          while((TWICON&0x10)!=0)
 324   2              {
 325   3            RSTSTAT = 0x00;
 326   3                  if(timeoutcount)
 327   3                  {
 328   4                      timeoutcount--;
 329   4                  }
 330   3                  else
 331   3                  {
 332   4                      break;
 333   4                  }
 334   3              }
 335   2        }
 336   1        
 337   1        return result;
 338   1      }
 339          
 340          
 341          /*******************************************************************************
 342          Function: InitTwi()
 343          Description: Init TWI Module  
 344          Input:  NULL
 345          Output: NULL
 346          Others:
 347          *******************************************************************************/
 348          void InitTwi(void)
 349          {                           //0 100               0 101
 350   1        TWICR = 0x45; //0x32;     //默认配置：SCL--P0.5->2.1；SDA--P0.4 ->2.2
 351   1        TWITOUT = 0x00;   //外部有上拉电阻，故芯片内部上拉不用使能，没有内部上拉
 352   1        TWIBR = 0x02;     //配置发送波特率，禁止总线超时判断，f=fsys/(16+2*CR*TWIBR)=24MHz/(16+2*64*2)=90KHz
 353   1        TWISTA = 0x00;    //64分频   [7:3]串行通讯状态位   [0]总线超时使能位
 354   1        TWICON = 0x00;    //ENTWI ，禁止高电平超时  0100 0000  
 355   1                            //[7]:总线超时标志位
 356   1                            //[6]:TWI使能位
 357   1                            //[5]:起始位 0不会发送起始条件
 358   1                            //[4]:终止位 0不会发送终止条件
 359   1                            //[3]:TWI串行中断标志位
 360   1                            //[2]:应答标志 0 不应答
 361   1                            //[1]:SCL高电平超时标志位 0 无超时发生 1 参与总算传输是，如时钟线高电平超过Tfree = Tsys*TWTFREE
             -*256所定义的系统时钟个数时  置位
 362   1                            //[0]:SCL高电平超时使能位
 363   1                
C51 COMPILER V9.52.0.0   TWIMODULE                                                         10/24/2019 11:21:05 PAGE 7   

 364   1        TWTFREE = 0xff;   //最大超时配置，超时检测配置
 365   1        TWIDAT = 0x00;
 366   1      }
 367          
 368          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    831    ----
   CONSTANT SIZE    =    256    ----
   XDATA SIZE       =   ----      66
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
