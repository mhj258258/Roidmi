C51 COMPILER V9.52.0.0   CALIBRATE                                                         10/24/2019 11:20:58 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE CALIBRATE
OBJECT MODULE PLACED IN .\output\Calibrate.obj
COMPILER INVOKED BY: C:\Program Files (x86)\keil 51\C51\BIN\C51.EXE code\Calibrate.c LARGE OPTIMIZE(7,SPEED) BROWSE INCD
                    -IR(.\header;.\roidmi\inc) DEBUG OBJECTEXTEND PRINT(.\output\Calibrate.lst) TABS(2) OBJECT(.\output\Calibrate.obj)

line level    source

   1          /********************************************************************************
   2          Copyright (C), Sinowealth Electronic. Ltd.
   3          Author:   andyliu
   4          Version:  V0.0
   5          Date:     2014/05/30
   6          History:
   7            V0.0    2014/05/30     Preliminary
   8          ********************************************************************************/
   9          #include "system.h"
  10          #include "AfeMtp.h"
  11          #include "ExtE2PRomRTC.h"
  12          #include "Calibrate.h"
  13          
  14          
  15          /*******************************************************************************
  16          Function: CaliVoltageSub(void)
  17          Description:  Calibration of the total voltage, Update "E2uiVPackGain"
  18          Input:
  19          Output: 
  20          Others:
  21          *******************************************************************************/
  22          bit CaliVoltageSub(void)
  23          {
  24   1        U8 i;
  25   1        U16 VPackTemp = 0;
  26   1        BOOL result = 0;
  27   1          
  28   1        for(i=ucCellNumOffset; i<(ucCellNumOffset+ucCellNum); i++)
  29   1        {
  30   2          result = TWIReadAFE(AFE_CELL1H+2*i,(U8 xdata *)(&AFE.uiCell[0+i]));
  31   2          VPackTemp += AFE.uiCell[i];                      
  32   2        }
  33   1        if(result)
  34   1        {
  35   2          E2uiVPackGain = (U32)CALIPACKVOL*VPackTemp/ulExtVPack;             //not really gain  really gain=3800/VpackG
             -ain
  36   2        }
  37   1        
  38   1        return  result;
  39   1      }
  40          
  41          
  42          /*******************************************************************************
  43          Function: CaliCurrentSub(void)
  44          Description:  Calibration current, update current gain"E2siCadcGain"
  45          Input:
  46          Output: 
  47          Others:
  48          *******************************************************************************/
  49          bit CaliCurrentSub(void)
  50          {
  51   1          S16 xdata TempCur1,TempCur2,TempGain;
  52   1        BOOL result = 0;
  53   1      
C51 COMPILER V9.52.0.0   CALIBRATE                                                         10/24/2019 11:20:58 PAGE 2   

  54   1        result = TWIReadAFE(AFE_CURH,(U8 xdata *)&TempCur1);
  55   1        Delay1ms(80);
  56   1        result = TWIReadAFE(AFE_CURH,(U8 xdata *)&TempCur2);
  57   1      
  58   1        if(result)
  59   1        {
  60   2            AFE.siCurr = (TempCur1+TempCur2)/2;
  61   2          if((AFE.siCurr&0x1000) != 0)                    //must turn the REG to data of S16
  62   2          {
  63   3            AFE.siCurr |= 0xE000;
  64   3          }
  65   2        //slExtCur是串口发来之的校准值，这边先不用
  66   2          //                CALICUR*(AFE.siCurr-E2siCadcOffset)/串口发来的数据
  67   2          TempGain = (S32)CALICUR*(AFE.siCurr-E2siCadcOffset)/slExtCur;       
  68   2          if(TempGain != 0)
  69   2          {
  70   3            E2siCadcGain = TempGain;
  71   3          }
  72   2        }
  73   1        
  74   1        return  result;
  75   1      }
  76          
  77          
  78          /*******************************************************************************
  79          Function: CaliCurOffsetSub(void)
  80          Description:  
  81          Input:    
  82          Output: 
  83          Others:
  84          *******************************************************************************/
  85          bit CaliCurOffsetSub(void)
  86          {
  87   1         S16 xdata TempCur1,TempCur2;
  88   1         BOOL result = 0;
  89   1      
  90   1         result = TWIReadAFE(AFE_CURH,(U8 xdata *)&TempCur1);
  91   1         Delay1ms(80);
  92   1         result = TWIReadAFE(AFE_CURH,(U8 xdata *)&TempCur2);
  93   1      
  94   1        if(result)
  95   1        {
  96   2          //因为电流是13位的所以，第13位是判断是否是负数
  97   2          if((TempCur1&0x1000) != 0)                    //must turn the REG to data of S16
  98   2          {
  99   3            TempCur1 |= 0xE000;//1110 0000
 100   3          }
 101   2          if((TempCur2&0x1000) != 0)                    //must turn the REG to data of S16
 102   2          {
 103   3            TempCur2 |= 0xE000;
 104   3          }
 105   2            AFE.siCurr = (TempCur1+TempCur2)/2;
 106   2            E2siCadcOffset = AFE.siCurr;
 107   2        }
 108   1        
 109   1        return  result;
 110   1      }
 111          
 112          
 113          /*******************************************************************************
 114          Function: CaliTS1Sub(void)
 115          Description:  Calibration temperature, update temperature offset
C51 COMPILER V9.52.0.0   CALIBRATE                                                         10/24/2019 11:20:58 PAGE 3   

 116          Input: 
 117          Output: 
 118          Others:
 119          *******************************************************************************/
 120          bit CaliTS1Sub(void)
 121          {
 122   1        S16 Tempe;
 123   1        BOOL result = 0;  
 124   1        
 125   1        result = TWIReadAFE(AFE_TS1H,(U8 xdata *)&AFE.uiTS1);
 126   1      
 127   1        if(result)
 128   1        {
 129   2          Tempe = uiExtTemp1-CalcuTemp(AFE.uiTS1);
 130   2      
 131   2          if(((Tempe-E2siTS1Offset)<150) && ((Tempe-E2siTS1Offset)>-150))
 132   2          {
 133   3            E2siTS1Offset = Tempe;
 134   3          }
 135   2      
 136   2        }
 137   1        
 138   1        return  result;
 139   1      }
 140          
 141          
 142          /*******************************************************************************
 143          Function: CaliTS2Sub(void)
 144          Description:  Calibration temperature, update temperature offset
 145          Input: 
 146          Output: 
 147          Others:
 148          *******************************************************************************/
 149          bit CaliTS2Sub(void)
 150          {
 151   1        S16 Tempe;
 152   1        BOOL result = 0;  
 153   1      
 154   1        result = TWIReadAFE(AFE_TS2H,(U8 xdata *)&AFE.uiTS2);
 155   1      
 156   1        if(result)
 157   1        {
 158   2          Tempe = uiExtTemp2-CalcuTemp(AFE.uiTS2);
 159   2        
 160   2          if(((Tempe-E2siTS2Offset)<150) && ((Tempe-E2siTS2Offset)>-150))
 161   2          {
 162   3            E2siTS2Offset = Tempe;
 163   3          }
 164   2        }
 165   1      
 166   1        return  result;
 167   1      }
 168          
 169          
 170          /*******************************************************************************
 171          Function: CaliRTCTime(void)
 172          Description:  
 173          Input:    
 174          Output: 
 175          Others:
 176          *******************************************************************************/
 177          bit CaliRTCTime(void)
C51 COMPILER V9.52.0.0   CALIBRATE                                                         10/24/2019 11:20:58 PAGE 4   

 178          {
 179   1        BOOL result = 0;
 180   1      
 181   1        RTC.Year = ucExtRTC[5];
 182   1        RTC.Month = ucExtRTC[4];
 183   1        RTC.Date = ucExtRTC[3];
 184   1        RTC.Hour = ucExtRTC[2];
 185   1        RTC.Minute = ucExtRTC[1];
 186   1        RTC.Second = ucExtRTC[0];
 187   1        
 188   1        result = RTCModifyTime();
 189   1        
 190   1        bE2PProcessFlg = 1;
 191   1        bE2PBKRtc = 1;
 192   1      
 193   1        return  result;
 194   1      }
 195          
 196          
 197          /*******************************************************************************
 198          Function: CaliProcess(void)
 199          Description:  
 200          Input:    
 201          Output: 
 202          Others:
 203          *******************************************************************************/
 204          void CaliProcess(void)
 205          {
 206   1        BOOL result = 1;
 207   1      
 208   1        if((ucExtcaliSwitch1 & 0x01) != 0)          //Calibration of the total voltage
 209   1        {
 210   2          if(!CaliVoltageSub())
 211   2          {
 212   3            result = 0;
 213   3          }
 214   2          else
 215   2          {
 216   3            ucExtcaliFlag |= 0x03;
 217   3          }
 218   2        }
 219   1        
 220   1        if((ucExtcaliSwitch1 & 0x04) != 0)          //Calibration TS1         
 221   1        {
 222   2          if(!CaliTS1Sub())
 223   2          {
 224   3            result = 0;
 225   3          }
 226   2          else
 227   2          {
 228   3            ucExtcaliFlag |= 0x04;
 229   3          }
 230   2        }
 231   1        
 232   1        if((ucExtcaliSwitch1 & 0x08) != 0)          //Calibration TS2
 233   1        {
 234   2          if(!CaliTS2Sub())
 235   2          {
 236   3            result = 0;
 237   3          }
 238   2          else
 239   2          {
C51 COMPILER V9.52.0.0   CALIBRATE                                                         10/24/2019 11:20:58 PAGE 5   

 240   3            ucExtcaliFlag |= 0x08;
 241   3          }
 242   2        }
 243   1        
 244   1        if((ucExtcaliSwitch1 & 0x10) != 0)          //Calibration current
 245   1        {
 246   2          if(!CaliCurrentSub())
 247   2          {
 248   3            result = 0;
 249   3          }
 250   2          else
 251   2          {
 252   3            ucExtcaliFlag |= 0x10;
 253   3          }
 254   2        }
 255   1        
 256   1        if((ucExtcaliSwitch1 & 0x20) != 0)          //Calibration CADC Current offset
 257   1        {
 258   2          if(!CaliCurOffsetSub())
 259   2          {
 260   3            result = 0;
 261   3          }
 262   2          else
 263   2          {
 264   3            ucExtcaliFlag |= 0x20;
 265   3          }
 266   2        } 
 267   1      
 268   1      //  if(ucExtcaliFlag == 0x3f)
 269   1      //  {
 270   1      //    ucExtcaliFlag = 0;
 271   1      //    bCAL = 1;
 272   1      //      bUpdataFlashFlg = 1;
 273   1      //  }
 274   1      //    else
 275   1      //    {
 276   1      //      bWriteFlashFlg = 1;         //Updated calibration parameters, and written to the flash
 277   1      //    ucWriteFlashCnt=0;
 278   1      //    }
 279   1      //  ucExtcaliSwitch1 = 0; 
 280   1      
 281   1        if((ucExtcaliSwitch1 & 0x80) != 0)          //Calibration RTC
 282   1        {
 283   2          if(!CaliRTCTime())
 284   2          {
 285   3            result = 0;
 286   3          }
 287   2          else
 288   2          {
 289   3              ucExtcaliFlag |= 0x80;
 290   3          }
 291   2        }
 292   1        
 293   1        if(bEnEEPRomBK)
 294   1        {
 295   2          if(ucExtcaliFlag == 0xBF)
 296   2          {
 297   3            goto CaliAllOk;
 298   3          }
 299   2        }
 300   1        else if(ucExtcaliFlag == 0x3f)
 301   1        {
C51 COMPILER V9.52.0.0   CALIBRATE                                                         10/24/2019 11:20:58 PAGE 6   

 302   2      CaliAllOk:
 303   2          ucExtcaliFlag = 0;
 304   2          bCAL = 1;
 305   2          E2ucCalibrated = CALI_FLAG;
 306   2          bUpdataFlashFlg = 1;
 307   2        }
 308   1        
 309   1        ucExtcaliSwitch1 = 0;
 310   1        bWriteFlashFlg = 1;         //Updated calibration parameters, and written to the flash
 311   1      //    UpEepromWithDelay();
 312   1      
 313   1          if(result)
 314   1          {
 315   2            UART_SEND_ACK;
 316   2          }
 317   1          else
 318   1          {
 319   2            UART_SEND_NACK;
 320   2          }    
 321   1      }
 322          
 323          
 324          
 325          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    861    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       7
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
